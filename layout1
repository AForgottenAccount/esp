if game.PlaceId == 9604012331 then
    local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wall%20v3')))()
    local w = library:CreateWindow("Mini Miners") -- Creates the window
    local b = w:CreateFolder("Main")
    local c = w:CreateFolder("Base Misc")
    local d = w:CreateFolder("LCTRL To Close Menu")-- Creates the folder(U will put here your buttons,etc)
    local loop = false
    
    b:Button("120 FOV, Anti AFK",function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/AForgottenAccount/afk120/main/afk%20120", true))()
    end)
    b:Button("Claim Daily Reward",function()
        game:GetService("ReplicatedStorage").DailyReward:FireServer()
    end)
    c:Button("Rebirth",function()
        game:GetService("ReplicatedStorage").Rebirth:InvokeServer()
    end)
    c:Button("Prestige",function()
        local Event = game:GetService("ReplicatedStorage").Prestige
        Event:InvokeServer()
    end)
    c:Button("Ascend",function()
        local Event = game:GetService("ReplicatedStorage").Ascend
        Event:InvokeServer()
    end)
    c:Button("Clear Base",function()
        game:GetService("ReplicatedStorage").DestroyAll:InvokeServer()
    end)
    b:Button("Destroy Seats",function()
        for i,v in next, workspace:GetDescendants() do
        if v:IsA'Seat' then
            v:Destroy()
        end
    end
    end)
    c:Toggle("Auto Rebirth & Load Layout 3",function(bool)
        loop = bool
    end)
    b:Dropdown("Teleport to ?",{"Merchant","Upgrades","Craftsmen","Box Man","ReRoll","Stardust ReRoll","Ascension Reroll"},true,function(mob) --true/false, replaces the current title "Dropdown" with the option that t
        if mob == "Merchant" then
            local Points = { Vector3.new(345, 1663, 168), Vector3.new(499, 1446, -226), Vector3.new(658, 1388, -375) }
            local Player = game:GetService("Players").LocalPlayer
            local Char = Player.Character or Player.CharacterAdded:Wait()
            local Root = Char:WaitForChild("HumanoidRootPart")
            local function teleportToPoint(vec3, speed)
                local bV = Instance.new("BodyVelocity")
                bV.Velocity, bV.MaxForce = Vector3.new(), Vector3.new(9e9, 9e9, 9e9); bV.Parent = Root
                local reached = false
                local connection = game:GetService("RunService").Stepped:Connect(function(_, step)
                    local diff = vec3 - Root.Position
                    Root.CFrame = CFrame.new(Root.Position + diff.Unit * math.min(speed * step, diff.Magnitude))
                    if (Vector3.new(vec3.X, 0, vec3.Z) - Vector3.new(Root.Position.X, 0, Root.Position.Z)).Magnitude < 0.1 then
                        Root.CFrame = CFrame.new(vec3)
                        reached = true
                    end
                end)
                repeat task.wait() until reached
                connection:Disconnect()
                bV:Destroy()
            end
            for _, v in next, Points do
                teleportToPoint(v, 500)
            end-- tp for "A"
        elseif mob == "Upgrades" then
            local Points = { Vector3.new(345, 1663, 168), Vector3.new(509, 1426, -244), Vector3.new(581, 1416, -209), Vector3.new(608, 1396, -215) }
            local Player = game:GetService("Players").LocalPlayer
            local Char = Player.Character or Player.CharacterAdded:Wait()
            local Root = Char:WaitForChild("HumanoidRootPart")
            local function teleportToPoint(vec3, speed)
                local bV = Instance.new("BodyVelocity")
                bV.Velocity, bV.MaxForce = Vector3.new(), Vector3.new(9e9, 9e9, 9e9); bV.Parent = Root
                local reached = false
                local connection = game:GetService("RunService").Stepped:Connect(function(_, step)
                    local diff = vec3 - Root.Position
                    Root.CFrame = CFrame.new(Root.Position + diff.Unit * math.min(speed * step, diff.Magnitude))
                    if (Vector3.new(vec3.X, 0, vec3.Z) - Vector3.new(Root.Position.X, 0, Root.Position.Z)).Magnitude < 0.1 then
                        Root.CFrame = CFrame.new(vec3)
                        reached = true
                    end
                end)
                repeat task.wait() until reached
                connection:Disconnect()
                bV:Destroy()
            end
            for _, v in next, Points do
                teleportToPoint(v, 500)
            end
        elseif mob == "Craftsmen" then
            local Points = { Vector3.new(346, 1663, 168), Vector3.new(14, 1448, 203) }
            local Player = game:GetService("Players").LocalPlayer
            local Char = Player.Character or Player.CharacterAdded:Wait()
            local Root = Char:WaitForChild("HumanoidRootPart")
            local function teleportToPoint(vec3, speed)
                local bV = Instance.new("BodyVelocity")
                bV.Velocity, bV.MaxForce = Vector3.new(), Vector3.new(9e9, 9e9, 9e9); bV.Parent = Root
                local reached = false
                local connection = game:GetService("RunService").Stepped:Connect(function(_, step)
                    local diff = vec3 - Root.Position
                    Root.CFrame = CFrame.new(Root.Position + diff.Unit * math.min(speed * step, diff.Magnitude))
                    if (Vector3.new(vec3.X, 0, vec3.Z) - Vector3.new(Root.Position.X, 0, Root.Position.Z)).Magnitude < 0.1 then
                        Root.CFrame = CFrame.new(vec3) 
                        reached = true
                    end
                end)
                repeat task.wait() until reached
                connection:Disconnect()
                bV:Destroy()
            end
            for _, v in next, Points do
                teleportToPoint(v, 500)
            end
        elseif mob == "Box Man" then
            local Points = { Vector3.new(347, 1663, 168), Vector3.new(67, 1654, 201), Vector3.new(41, 1447, 69) }
            local Player = game:GetService("Players").LocalPlayer
            local Char = Player.Character or Player.CharacterAdded:Wait()
            local Root = Char:WaitForChild("HumanoidRootPart")
            local function teleportToPoint(vec3, speed)
                local bV = Instance.new("BodyVelocity")
                bV.Velocity, bV.MaxForce = Vector3.new(), Vector3.new(9e9, 9e9, 9e9); bV.Parent = Root
                local reached = false
                local connection = game:GetService("RunService").Stepped:Connect(function(_, step)
                    local diff = vec3 - Root.Position
                    Root.CFrame = CFrame.new(Root.Position + diff.Unit * math.min(speed * step, diff.Magnitude))
                    if (Vector3.new(vec3.X, 0, vec3.Z) - Vector3.new(Root.Position.X, 0, Root.Position.Z)).Magnitude < 0.1 then
                        Root.CFrame = CFrame.new(vec3)
                        reached = true
                    end
                end)
                repeat task.wait() until reached
                connection:Disconnect()
                bV:Destroy()
            end
            for _, v in next, Points do
                teleportToPoint(v, 500)
            end
        elseif mob == "ReRoll" then
            local Points = { Vector3.new(345, 1663, 168), Vector3.new(571, 1487, -192) }
            local Player = game:GetService("Players").LocalPlayer
            local Char = Player.Character or Player.CharacterAdded:Wait()
            local Root = Char:WaitForChild("HumanoidRootPart")
            local function teleportToPoint(vec3, speed)
                local bV = Instance.new("BodyVelocity")
                bV.Velocity, bV.MaxForce = Vector3.new(), Vector3.new(9e9, 9e9, 9e9); bV.Parent = Root
                local reached = false
                local connection = game:GetService("RunService").Stepped:Connect(function(_, step)
                    local diff = vec3 - Root.Position
                    Root.CFrame = CFrame.new(Root.Position + diff.Unit * math.min(speed * step, diff.Magnitude))
                    if (Vector3.new(vec3.X, 0, vec3.Z) - Vector3.new(Root.Position.X, 0, Root.Position.Z)).Magnitude < 0.1 then
                        Root.CFrame = CFrame.new(vec3)
                        reached = true
                    end
                end)
                repeat task.wait() until reached
                connection:Disconnect()
                bV:Destroy()
            end
            for _, v in next, Points do
                teleportToPoint(v, 500)
            end
        elseif mob == "Stardust ReRoll" then
            local Points = { Vector3.new(345, 1663, 168), Vector3.new(606, 1444, 185) }
            local Player = game:GetService("Players").LocalPlayer
            local Char = Player.Character or Player.CharacterAdded:Wait()
            local Root = Char:WaitForChild("HumanoidRootPart")
            local function teleportToPoint(vec3, speed)
                local bV = Instance.new("BodyVelocity")
                bV.Velocity, bV.MaxForce = Vector3.new(), Vector3.new(9e9, 9e9, 9e9); bV.Parent = Root
                local reached = false
                local connection = game:GetService("RunService").Stepped:Connect(function(_, step)
                    local diff = vec3 - Root.Position
                    Root.CFrame = CFrame.new(Root.Position + diff.Unit * math.min(speed * step, diff.Magnitude))
                    if (Vector3.new(vec3.X, 0, vec3.Z) - Vector3.new(Root.Position.X, 0, Root.Position.Z)).Magnitude < 0.1 then
                        Root.CFrame = CFrame.new(vec3)
                        reached = true
                    end
                end)
                repeat task.wait() until reached
                connection:Disconnect()
                bV:Destroy()
            end
            for _, v in next, Points do
                teleportToPoint(v, 500)
            end
        elseif mob == "Ascension Reroll" then
            local Points = { Vector3.new(345, 1663, 168), Vector3.new(138, 1447, 228), Vector3.new(160, 1447, 267) }
            local Player = game:GetService("Players").LocalPlayer
            local Char = Player.Character or Player.CharacterAdded:Wait()
            local Root = Char:WaitForChild("HumanoidRootPart")
            local function teleportToPoint(vec3, speed)
                local bV = Instance.new("BodyVelocity")
                bV.Velocity, bV.MaxForce = Vector3.new(), Vector3.new(9e9, 9e9, 9e9); bV.Parent = Root
                local reached = false
                local connection = game:GetService("RunService").Stepped:Connect(function(_, step)
                    local diff = vec3 - Root.Position
                    Root.CFrame = CFrame.new(Root.Position + diff.Unit * math.min(speed * step, diff.Magnitude))
                    if (Vector3.new(vec3.X, 0, vec3.Z) - Vector3.new(Root.Position.X, 0, Root.Position.Z)).Magnitude < 0.1 then
                        Root.CFrame = CFrame.new(vec3)
                        reached = true
                    end
                end)
                repeat task.wait() until reached
                connection:Disconnect()
                bV:Destroy()
            end
            for _, v in next, Points do
                teleportToPoint(v, 500)
            end
        end
    end)
    
    b:Dropdown("Teleport to ? (Bases)",{"Base 1","Base 2","Base 3","Base 4"},true,function(mob) --true/false, replaces the current title "Dropdown" with the option that t
        if mob == "Base 1" then
        local Points = { Vector3.new(345, 1663, 168), Vector3.new(356, 1368, -380) }
        local Player = game:GetService("Players").LocalPlayer
        local Char = Player.Character or Player.CharacterAdded:Wait()
        local Root = Char:WaitForChild("HumanoidRootPart")
        local function teleportToPoint(vec3, speed)
            local bV = Instance.new("BodyVelocity")
            bV.Velocity, bV.MaxForce = Vector3.new(), Vector3.new(9e9, 9e9, 9e9); bV.Parent = Root
            local reached = false
            local connection = game:GetService("RunService").Stepped:Connect(function(_, step)
                local diff = vec3 - Root.Position
                Root.CFrame = CFrame.new(Root.Position + diff.Unit * math.min(speed * step, diff.Magnitude))
                if (Vector3.new(vec3.X, 0, vec3.Z) - Vector3.new(Root.Position.X, 0, Root.Position.Z)).Magnitude < 0.1 then
                    Root.CFrame = CFrame.new(vec3)
                    reached = true
                end
            end)
            repeat task.wait() until reached
            connection:Disconnect()
            bV:Destroy()
        end
        for _, v in next, Points do
            teleportToPoint(v, 500)
        end
        elseif mob == "Base 2" then
            local Points = { Vector3.new(345, 1663, 168), Vector3.new(291, 1437, 514) }
            local Player = game:GetService("Players").LocalPlayer
            local Char = Player.Character or Player.CharacterAdded:Wait()
            local Root = Char:WaitForChild("HumanoidRootPart")
            local function teleportToPoint(vec3, speed)
                local bV = Instance.new("BodyVelocity")
                bV.Velocity, bV.MaxForce = Vector3.new(), Vector3.new(9e9, 9e9, 9e9); bV.Parent = Root
                local reached = false
                local connection = game:GetService("RunService").Stepped:Connect(function(_, step)
                    local diff = vec3 - Root.Position
                    Root.CFrame = CFrame.new(Root.Position + diff.Unit * math.min(speed * step, diff.Magnitude))
                    if (Vector3.new(vec3.X, 0, vec3.Z) - Vector3.new(Root.Position.X, 0, Root.Position.Z)).Magnitude < 0.1 then
                        Root.CFrame = CFrame.new(vec3)
                        reached = true
                    end
                end)
                repeat task.wait() until reached
                connection:Disconnect()
                bV:Destroy()
            end
            for _, v in next, Points do
                teleportToPoint(v, 500)
            end
        elseif mob == "Base 3" then
            local Points = { Vector3.new(345, 1663, 168), Vector3.new(559, 1446, 268) }
            local Player = game:GetService("Players").LocalPlayer
            local Char = Player.Character or Player.CharacterAdded:Wait()
            local Root = Char:WaitForChild("HumanoidRootPart")
            local function teleportToPoint(vec3, speed)
                local bV = Instance.new("BodyVelocity")
                bV.Velocity, bV.MaxForce = Vector3.new(), Vector3.new(9e9, 9e9, 9e9); bV.Parent = Root
                local reached = false
                local connection = game:GetService("RunService").Stepped:Connect(function(_, step)
                    local diff = vec3 - Root.Position
                    Root.CFrame = CFrame.new(Root.Position + diff.Unit * math.min(speed * step, diff.Magnitude))
                    if (Vector3.new(vec3.X, 0, vec3.Z) - Vector3.new(Root.Position.X, 0, Root.Position.Z)).Magnitude < 0.1 then
                        Root.CFrame = CFrame.new(vec3)
                        reached = true
                    end
                end)
                repeat task.wait() until reached
                connection:Disconnect()
                bV:Destroy()
            end
            for _, v in next, Points do
                teleportToPoint(v, 500)
            end
        elseif mob == "Base 4" then
            local Points = { Vector3.new(345, 1663, 168), Vector3.new(-153, 1446, -185) }
            local Player = game:GetService("Players").LocalPlayer
            local Char = Player.Character or Player.CharacterAdded:Wait()
            local Root = Char:WaitForChild("HumanoidRootPart")
            local function teleportToPoint(vec3, speed)
                local bV = Instance.new("BodyVelocity")
                bV.Velocity, bV.MaxForce = Vector3.new(), Vector3.new(9e9, 9e9, 9e9); bV.Parent = Root
                local reached = false
                local connection = game:GetService("RunService").Stepped:Connect(function(_, step)
                    local diff = vec3 - Root.Position
                    Root.CFrame = CFrame.new(Root.Position + diff.Unit * math.min(speed * step, diff.Magnitude))
                    if (Vector3.new(vec3.X, 0, vec3.Z) - Vector3.new(Root.Position.X, 0, Root.Position.Z)).Magnitude < 0.1 then
                        Root.CFrame = CFrame.new(vec3)
                        reached = true
                    end
                end)
                repeat task.wait() until reached
                connection:Disconnect()
                bV:Destroy()
            end
            for _, v in next, Points do
                teleportToPoint(v, 500)
            end
        end
    end)
    b:Dropdown("Teleport to ? (Players)",{"Aaron","For"},true,function(mob) --true/false, replaces the current title "Dropdown" with the option that t
        if mob == "Aaron" then
            local p1 = game.Players.LocalPlayer.Character.HumanoidRootPart
            local p2 = "seaners06"
            local pos = p1.CFrame
            p1.CFrame = game.Players[p2].Character.HumanoidRootPart.CFrame-- tp for "A"
        elseif mob == "For" then
            local p1 = game.Players.LocalPlayer.Character.HumanoidRootPart
            local p2 = "Forgoten_Account"
            local pos = p1.CFrame
            p1.CFrame = game.Players[p2].Character.HumanoidRootPart.CFrame
        end
    end)
    --b:Box("Wait Time Between Rebirths","number",function(value) -- "number" or "string"
        --print(value)
    --end)
    spawn(function() -- Wrap in spawn function so it doesn't yield any code below OR put it at the bottom.
    -- Better to wrap in a spawn function though
    while wait() do
        if loop then -- If Loop is true
            local args = {
				[1] = "Load",
				[2] = "Layout3"
			}
			game:GetService("ReplicatedStorage").Layouts:InvokeServer(unpack(args))
			wait(3)
			game:GetService("ReplicatedStorage").Rebirth:InvokeServer()
            end
        end
    end)
end
--[[
How to refresh a dropdown:
1)Create the dropdown and save it in a variable
local yourvariable = b:Dropdown("Hi",yourtable,function(a)
    print(a)
end)
2)Refresh it using the function
yourvariable:Refresh(yourtable)
How to refresh a label:
1)Create your label and save it in a variable
local yourvariable = b:Label("Pretty Useless NGL",{
    TextSize = 25; -- Self Explaining
    TextColor = Color3.fromRGB(255,255,255);
    BgColor = Color3.fromRGB(69,69,69);
})
2)Refresh it using the function
yourvariable:Refresh("Hello") It will only change the text ofc
]]
